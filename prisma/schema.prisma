generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  username          String   @unique
  phone             String?
  profile           String?
  email             String   @unique
  emailVerified     Boolean  @default(false)
  password          String
  referralCode      String   @unique
  role              Role     @default(USER)
  points            Int      @default(0)
  level             Int      @default(1)
  firstLoginBonus   Boolean? @default(false)
  firstDepositBonus Boolean? @default(false)

  status            UserStatus
  wallet            Wallet?
  withdraws         Withdraw[]
  userProducts      UserProduct[]
  rentals           Rental[]
  salesSold         Sale[]        @relation("SaleSeller")
  salesBought       Sale[]        @relation("SaleBuyer")
  referralsMade     Referral[]    @relation("UserReferralsMade")
  referralsReceived Referral[]    @relation("UserReferralsReceived")
  rewards           Reward[]
  trialFund         TrialFund?

  verifications  Verification[]
  passwordResets PasswordReset[]

  UserLevel UserLevel[]

  Deposit      Deposit[]
  Notification Notification[]
}

model Verification {
  id        Int      @id @default(autoincrement())
  email     String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int?  @unique

  @@unique([email])
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @unique
  code      String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([expiresAt])
}

model Level {
  id         Int         @id @default(autoincrement())
  level      Int         @unique
  points     Int
  userLevels UserLevel[]
}

model UserLevel {
  id       Int      @id @default(autoincrement())
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  level    Level    @relation(fields: [levelId], references: [id], onDelete: Cascade)
  levelId  Int
  gainedAt DateTime @default(now())

  @@unique([userId, levelId])
}

model Product {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId      Int
  title       String
  description String?
  image       String
  price       Decimal
  dailyIncome Decimal
  fee         Decimal
  deletedAt   DateTime?
  rentalDays  Int
  roiPercent  Float     @default(0.0)

  userProducts UserProduct[]
  rewards      Reward[]
  trialFunds   TrialFund[]
  saleItems    SaleItem[]

  rentals Rental[]
}

model UserProduct {
  id         Int      @id @default(autoincrement())
  acquiredAt DateTime @default(now())

  expiresAt DateTime
  status    UserProductStatus @default(ACTIVE)

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int

  @@unique([userId, productId])
}

model Rental {
  id       Int      @id @default(autoincrement())
  rentedAt DateTime @default(now())
  duration Int

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

model Referral {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  code String @unique

  referrer   User @relation("UserReferralsMade", fields: [referrerId], references: [id], onDelete: Cascade)
  referrerId Int

  referred   User @relation("UserReferralsReceived", fields: [referredId], references: [id], onDelete: Cascade)
  referredId Int

  commissions Commission[]
}

model Agreement {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
}

model Sale {
  id       Int        @id @default(autoincrement())
  total    Decimal
  date     DateTime   @default(now())
  seller   User       @relation("SaleSeller", fields: [sellerId], references: [id])
  sellerId Int
  buyer    User       @relation("SaleBuyer", fields: [buyerId], references: [id])
  buyerId  Int
  items    SaleItem[]
}

model SaleItem {
  id        Int     @id @default(autoincrement())
  sale      Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  saleId    Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  quantity  Int
}

model Reward {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reward Decimal
  date   DateTime
  status RewardStatus @default(SUCCESS)

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int

  @@unique([userId, productId, date])
}

model Commission {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  amount     Decimal
  percentage Float
  levelDepth Int?

  referral   Referral @relation(fields: [referralId], references: [id], onDelete: Cascade)
  referralId Int
}

model Wallet {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  balance  Decimal @default(0)
  reserved Decimal @default(0)

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique
}

model Withdraw {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  amount Decimal
  fee    Decimal
  total  Decimal
  status WithdrawStatus @default(PENDING)
  date   DateTime       @default(now())

  msisdn      String? // phone number  (e.g. 03xxxxxxxxx)
  cnic        String? // CNIC number   (e.g. 42101-1234567-8)
  processedAt DateTime?

  externalId String? // Easypaisa txn-id when paid
  verifiedAt DateTime?

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}

model TrialFund {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique

  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId Int?

  amount      Decimal         @default(200)
  grantedAt   DateTime        @default(now())
  expiresAt   DateTime
  status      TrialFundStatus @default(ACTIVE)
  recoveredAt DateTime?
  usedAmount  Decimal         @default(0)
}

model Deposit {
  id          Int           @id @default(autoincrement())
  user        User          @relation(fields: [userId], references: [id])
  userId      Int
  amount      Decimal
  provider    String        @default("EASYPK")
  reference   String        @unique
  externalId  String?
  status      DepositStatus @default(PENDING)
  fee         Decimal       @default(0)
  total       Decimal       @default(0)
  createdAt   DateTime      @default(now())
  verifiedAt  DateTime?
  lockedUntil DateTime?
}

model Notification {
  id        Int               @id @default(autoincrement())
  userId    Int
  title     String
  message   String
  isRead    Boolean           @default(false)
  createdAt DateTime          @default(now())
  type      NotificationType?
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum NotificationType {
  ORDER_PLACED
  NEW_MESSAGE
  PROMOTION
  REFERRAL_BONUS
  WALLET_UPDATED
  PRODUCT_ALERT
  LEVEL_UP
  REWARD_EARNED
}

enum UserStatus {
  APPROVED
  SUSPENDED
}

enum WithdrawStatus {
  PENDING
  APPROVED
  SUSPENDED
}

enum RewardStatus {
  FAILED
  SUCCESS
}

enum AgreementStatus {
  ACTIVE
  CLOSED
}

enum ProductType {
  NFT
  MACHINE
}

enum TrialFundStatus {
  ACTIVE
  RECOVERED
}

enum Role {
  USER
  ADMIN
}

enum UserProductStatus {
  ACTIVE
  REFUNDED
}

enum DepositStatus {
  PENDING
  SUCCESS
  FAILED
}

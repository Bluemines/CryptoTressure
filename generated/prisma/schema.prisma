// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  username      String  @unique
  phone         String?
  email         String  @unique
  emailVerified Boolean @default(false)
  password      String
  referralCode  String? @unique

  wallet            Wallet?
  withdraws         Withdraw[]
  userNFTs          UserNFT[]
  agreements        Agreement[]
  salesSold         Sale[]      @relation("SaleSeller")
  salesBought       Sale[]      @relation("SaleBuyer")
  referralsMade     Referral[]  @relation("UserReferralsMade")
  referralsReceived Referral[]  @relation("UserReferralsReceived")
  rewards           Reward[]
  trialFunds        TrialFund[]

  verifications Verification[]
}

model Verification {
  id        Int      @id @default(autoincrement())
  email     String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int?  @unique

  @@unique([email])
}

model NFT {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  price       Decimal
  description String?
  dailyIncome Decimal
  fee         Decimal
  level       Int

  userNFTs UserNFT[]
}

model UserNFT {
  id         Int      @id @default(autoincrement())
  acquiredAt DateTime @default(now())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  nft   NFT @relation(fields: [nftId], references: [id], onDelete: Cascade)
  nftId Int
}

model Machine {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String?
  image       String
  price       Decimal
  dailyIncome Decimal
  fee         Decimal
  rentalDays  Int
  level       Int

  agreements Agreement[]
  rewards    Reward[]

  TrialFund TrialFund[]
}

model Agreement {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  startDate DateTime
  endDate   DateTime
  status    AgreementStatus @default(ACTIVE)

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  machine   Machine @relation(fields: [machineId], references: [id], onDelete: Cascade)
  machineId Int
}

model Sale {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  amount Decimal
  date   DateTime @default(now())

  seller   User @relation("SaleSeller", fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId Int

  buyer   User @relation("SaleBuyer", fields: [buyerId], references: [id], onDelete: Cascade)
  buyerId Int

  items SaleItem[]
}

model SaleItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productType ProductType
  productId   Int
  quantity    Int

  sale   Sale @relation(fields: [saleId], references: [id], onDelete: Cascade)
  saleId Int
}

model Referral {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  code String @unique

  referrer   User @relation("UserReferralsMade", fields: [referrerId], references: [id], onDelete: Cascade)
  referrerId Int

  referred   User @relation("UserReferralsReceived", fields: [referredId], references: [id], onDelete: Cascade)
  referredId Int

  commissions Commission[]
}

model Commission {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  amount     Decimal
  percentage Float

  referral   Referral @relation(fields: [referralId], references: [id], onDelete: Cascade)
  referralId Int
}

model Reward {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reward Decimal
  date   DateTime     @default(now())
  status RewardStatus @default(SUCCESS)

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  machine   Machine @relation(fields: [machineId], references: [id], onDelete: Cascade)
  machineId Int
}

model Wallet {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  balance Decimal @default(0)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int     @unique
}

model Withdraw {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  amount Decimal
  fee    Decimal
  total  Decimal
  status WithdrawStatus @default(PENDING)
  date   DateTime       @default(now())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}

model TrialFund {
  id          Int             @id @default(autoincrement())
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int             @unique
  amount      Decimal         @default(200)
  grantedAt   DateTime        @default(now())
  expiresAt   DateTime
  status      TrialFundStatus @default(ACTIVE)
  recoveredAt DateTime?

  machine   Machine? @relation(fields: [machineId], references: [id])
  machineId Int?
}

enum WithdrawStatus {
  PENDING
  APPROVED
  SUSPENDED
}

enum RewardStatus {
  FAILED
  SUCCESS
}

enum AgreementStatus {
  ACTIVE
  CLOSED
}

enum ProductType {
  NFT
  MACHINE
}

enum TrialFundStatus {
  ACTIVE
  RECOVERED
}
